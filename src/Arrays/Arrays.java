package Arrays;

public class Arrays {
    public static void main(String[] args) {
        System.out.println("Hello there");
        arrays();
    }

    public static void arrays(){
        //Для создания массива нам надо:
//        1 - указать тип данных который будет в массиве и рядом поставить []
//        2 - дать название массиву;
//        3 - либо ничего не прописывать и добавлять по ходу дела элементы, либо задать кол-во элементов в нем как ниже
        int[] nums = new int[5];
        nums[3] = 4;
        nums[4] = 5;
        for (int i = 0; i < nums.length; i++){
            System.out.println(nums[i]);
        }
        // Как мы видим мы задали что в массиве будет 5 элементов. Если мы ничего не подставили, то будет 0
        // Заменили пару элементов (см цикл)
        // Но чтобы такого гемора не было можно создавать массивы с элементами
        float[] nums2 = new float[] {5.66f, 34.43f, 23.0f};

        // Как создать массив с массивами?
        int[][] nums3 = new int[][] {{2, 3, 4}, {2, 3, 7}};
        // Также можно прописывать сколько массивов будет в массиве и сколько элемнетов будет в массиве (то есть все это дело ограничивать)
        // Но если мы этого не делаем, то надо сразу прописывать значение этого двкмерного массива
        // разумеется массивы могут быть и трехмерными и четырех и тд
        // В общем, логика такая, что мы должны постоянно задавать какие и сколько значений будет, чтобы java знала скок памяти под это выделять
        // Да, в более высокоуровневых языках все проще, но этим и хороша джава что под все надо планировать и тем самым сложнее написать говно код

        //Следующее что надо признать так это то что все методы которые вы можете представить с массивами нет в джаве.
        // Их надо прописывать вручную
        // То есть например минимальное число над найти в массиве


    }
    public static void minimum(int[] arr){
        int min = arr[0];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < min) {
                min = arr[i];
            }
        }
        System.out.println(min);
    }
}
