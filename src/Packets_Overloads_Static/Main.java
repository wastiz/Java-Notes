package Packets_Overloads_Static;

// Как видим надо прописывать полный путь от папки src
// Как бы принято, что один файл - один класс, но все равно надо указывать название класса в импорте
// но если надо импортировать все классы из пакета, то используйте *
import Packets_Overloads_Static.db.DB;
public class Main {
    // Итак, рассмотрим несколько моментов здесь: Пакеты, перегрузки и модификатор static
    // Пакеты - это просто папки. Но разумеется, чтобы работать с классами из другиз пакетов, нам надо их правильно импортировать
    DB database = new DB(21312);

    // Перегрузки
    // Смотрите, как мы знаем мы можем создавать несколько конструкторов с разными аргументами
    // Так вот можно создавать несколько функций с одним названием но разными аргументами
    public static void info () {
        System.out.println("Hello");
    }

    public static void info(String word) {
        System.out.println(word + "!");
    }

    // Разумеется должно отличаться кол-во аргументов или их типы
//    public static void info(String werd) {
//        System.out.println(werd + "!");
//    }

    // Модификатор static
    // Смотреть класс Person
    // Суть этого модификатора заключается в том, что есть к полю или функции присвоен этот модификатор, то она принадлежит именно классу, а не объекту класса
    // Вот смотрите

    public static void main (String[] args) {
//        Person.counter = 5;
//        System.out.println(Person.counter);
        // Я просто обращаюсь к полю класса и изменяю его для всех объектов, которые будут созданы на основе этого класса
        // Или еще пример
        Person obj1 = new Person();
        Person obj2 = new Person();
        Person obj3 = new Person();
        Person obj4 = new Person();

        obj4.getCount();
        // Логично чтобы вывело 1, потому что мы создали объект у которого создалась новое поле (0) и прибавилось 1
        // Но выводит 9, потому что 5 приписали до и 4 объекта создали, которые увеличивали поле
        // Если бы поле не было бы статичное, то выводило бы 1

        // Если мы говорим про статичные методы, то не обязательно от через объект вызывать (IDE будет подсказывать), а можем вызывать через класс
        // Также учитываем, что в статичных методах можем работать только со статичными переменными и методами

        // Модификатор final
        // Тоже самое что констранта. Переопределить переменную или метод нельзя
    }

}
